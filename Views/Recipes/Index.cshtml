@{
    ViewData["Title"] = "Scraped Meals";
}

<h2 class="header">@ViewData["Title"]</h2>


@model X.PagedList.IPagedList<Recipe>
@using X.PagedList.Mvc.Core

<!-- Implement frontend part for filters and pagination -->
<!--  recipes = _recipeRepository.Filter(ingredientsFilter, cookingTimeFilter,
recipeNameFilter, caloriesMinFilter, caloriesMaxFilter, carbsFilter, proteinFilter, fatsFilter); -->


<div id="filterSection">
    <h3 class="filters-heading">Filter Recipes</h3>
    <form id="filterForm">
        <!-- Add your filter inputs here -->
        @using (Html.BeginForm("Index", "Recipes", FormMethod.Get))
        {
            <div class="form-sections">

                <!-- Recipe Name Filter -->
                <label for="recipeNameFilter" class="filters_style">Name:</label>
                <input id="recipeNameFilter" name="recipeNameFilter" type="text" />

                <!-- Ingredients Filter -->
                <label for="ingredientsFilter" class="filters_style">Ingredients:</label>
                <input id="ingredientsFilter" name="ingredientsFilter" type="text" />

            </div>

            <div class="form-sections">
                <!-- Cooking Time Filter -->
                <label for="minHours" class="filters_style">MinHours:</label>
                <input id="minHours" name="minHours" type="number" step="1" />

                <label for="minMinutes" class="filters_style">MinMinutes:</label>
                <input id="minMinutes" name="minMinutes" type="number" step="1" />

                <label for="maxHours" class="filters_style">MaxHours:</label>
                <input id="maxHours" name="maxHours" type="number" step="1" />

                <label for="maxMinutes" class="filters_style">MaxMinutes:</label>
                <input id="maxMinutes" name="maxMinutes" type="number" step="1" />
            </div>


            <div class="form-sections">
                <!-- Calories Min Filter -->
                <label for="caloriesMinFilter" class="filters_style">Minimum Calories:</label>
                <input id="caloriesMinFilter" name="caloriesMinFilter" type="number" min="0" max="9999" />

                <!-- Calories Max Filter -->
                <label for="caloriesMaxFilter" class="filters_style">Maximum Calories:</label>
                <input id="caloriesMaxFilter" name="caloriesMaxFilter" type="number" min="0" max="9999" />

                <!-- Carbs Max Filter -->
                <label for="carbsFilter" class="filters_style">Maximum Carbs:</label>
                <input id="carbsFilter" name="carbsFilter" type="number" min="0" max="9999" />

                <!-- Protein Max Filter -->
                <label for="proteinFilter" class="filters_style">Maximum Protein:</label>
                <input id="proteinFilter" name="proteinFilter" type="number" min="0" max="9999" />

                <!-- Fats Max Filter -->
                <label for="fatsFilter" class="filters_style">Maximum Fats:</label>
                <input id="fatsFilter" name="fatsFilter" type="number" min="0" max="9999" />
            </div>



            <input id="filter-btn" type="submit" value="Filter">

            Html.EndForm();
        }




    </form>


</div>

<div id="displaySection">
    <h3 class="recipes-heading">Recipes</h3>
    <button id="scrapeButton" class="btn btn-primary">Not Enough Recipes? Click here</button>
    @foreach (var recipe in Model)
    {
        <div class="sections">
            <h4 class="recipe-name">@recipe.RecipeName</h4>
            <div class="recipe_details">
                <div class="description">
                    <p> <b>Description:</b> @recipe.Description</p>
                    <p> <b>Calories:</b>@recipe.Calories</p>
                    <p> <b>Carbohydrates:</b> @recipe.Carbohydrates</p>
                    <p> <b>Proteins:</b> @recipe.Proteins</p>
                    <p> <b>Fats:</b> @recipe.Fats</p>
                    <p> <b>Cooking Time:</b> @recipe.CookingTime</p>
                    <p> <b>Servings:</b> @recipe.Servings</p>
                </div>

                <div class="ingredients">
                    <h5><b>Ingredients:</b></h5>
                
                <ol class="bold-numbers">
                    @foreach (var recipeIngredient in recipe.Macros)
                    {
                        <li>@recipeIngredient.Ingredient.IngredientName</li>
                    }
                </ol>
                </div>
                @if (recipe.PreparationInstructions != null && recipe.PreparationInstructions.Any())
                {
                    <div class="instructions">
                        <h5><b>Instructions:</b></h5>
                    <ol class="bold-numbers">
                        @foreach (var instruction in recipe.PreparationInstructions)
                        {
                            <li>@instruction.InstructionName</li>
                        }
                    </ol>
                    </div>
                }

                @if (!string.IsNullOrEmpty(recipe.DifficultyLevel))
                {
                    <p>Difficulty Level: @recipe.DifficultyLevel</p>
                }
                <p> <b>Created Date: @recipe.CreatedDate</b></p>
            </div>

            <!-- Add other properties as needed -->
        </div>
    }


    <!-- Pagination links  TODO FINISH IMPLEMENTING PAGE NAVIGATION-->

    <div id="pagination">
        @Html.PagedListPager(Model, page => Url.Action("Index", new { page }))

    </div>


</div>


@section scripts {
    <script>
        $(document).ready(function () {
            $("#scrapeButton").click(function () {
                $.ajax({
                    type: "GET",
                    url: '@Url.Action("ScrapeData", "RecipesScraper")',
                    success: function (data) {
                        alert("Scraping completed successfully!");
                        // Optionally, refresh the page or update part of your page here
                    },
                    error: function (error) {
                        alert("Error occurred during scraping!");
                    }
                });
            });
        });
    </script>
}

<script>
    document.getElementById("filterForm").onsubmit = function () {
        var minInput = document.getElementById("caloriesMinFilter");
        var maxInput = document.getElementById("caloriesMaxFilter");

        // Parse the input values as integers
        var minCalories = parseInt(minInput.value, 10);
        var maxCalories = parseInt(maxInput.value, 10);

        // Ensure that the minimum calories are not greater than the maximum calories
        if (minCalories > maxCalories) {
            // Display an error message or take appropriate action
            alert("Minimum calories cannot be greater than maximum calories.");

            // Prevent the form submission
            return false;
        }

        // Continue with the form submission
        return true;
    };
</script>
<!--   <span asp-validation-for="cookingTimeFilter.MinHours" class="text-danger"></span>  -->
@* <div class="form-group">
                <label>Minimum Minutes:</label>
                <input id="MinMinutes" name="MinMinutes" type="text" class="form-control" />
                <!--   <span asp-validation-for="cookingTimeFilter.MinMinutes" class="text-danger"></span>-->
         </div>

         <div class="form-group">
                <label>Maximum Hours:</label>
                <input id="MaxHours" name="MaxHours" type="text" class="form-control" />
                <!-- <span asp-validation-for="cookingTimeFilter.MaxHours" class="text-danger"></span>-->
         </div> *@


@*  <label asp-for="cookingTimeFilter.MaxMinutes">Maximum Minutes:</label>
                <input asp-for="cookingTimeFilter.MaxMinutes" class="form-control" />
                <span asp-validation-for="cookingTimeFilter.MaxMinutes" class="text-danger"></span> *@
@*  <div class="wrapper">
             <div class="values">
                 <span id="rangeHours1">
                     00:00
                 </span>
                 <span> &dash; </span>
                 <span id="rangeHours2">
                     23:59
                 </span>
             </div>
             <div class="container">
                 <div class="slider-track"></div>
                 <input type="range" min="0" max="1440" value="0" id="slider-hours-1" oninput="slideHoursOne()">
                 <input type="range" min="0" max="1440" value="1440" id="slider-hours-2" oninput="slideHoursTwo()">
             </div>
         </div> *@


@* <script>
    $(document).ready(function () {
        // Attach a click event handler to the button
        $("#submitBtn").on("click", function () {
            // Get the value of MinHours input field
            var minHoursValue = $("#MinHours").val();

            // Make an AJAX request
            $.ajax({
                type: "GET",
                url: "/RecipesScraper/Index", // Adjust the URL as needed
                data: { MinHours: minHoursValue },
                success: function (data) {
                    // Handle the success response if needed
                    console.log("Success:", data);
                },
                error: function (error) {
                    // Handle the error response if needed
                    console.log("Error:", error);
                }
            });
        });
    });
</script> *@
@*      <label>Minimum Hours:</label>
                 <input id="MinHours" name="MinHours" type="number"/> *@
@* <script>
    window.onload = function () {
        slideHoursOne();
        slideHoursTwo();
    }

    let sliderHoursOne = document.getElementById("slider-hours-1");
    let sliderHoursTwo = document.getElementById("slider-hours-2");
    let displayValHoursOne = document.getElementById("rangeHours1");
    let displayValHoursTwo = document.getElementById("rangeHours2");
    let minGapHours = 0;
    let sliderTrackHours = document.querySelector(".slider-track-hours");
    let sliderMaxValueHours;

    function slideHoursOne() {
        console.log("slideHoursOne");
        sliderMaxValueHours = parseInt(sliderHoursOne.max); // Update sliderMaxValue
        if (parseInt(sliderHoursTwo.value) - parseInt(sliderHoursOne.value) <= minGapHours) {
            sliderHoursOne.value = parseInt(sliderHoursTwo.value) - minGapHours;
        }
        displayValHoursOne.textContent = formatTime(sliderHoursOne.value);
        fillColorHours();
        console.log(sliderHoursOne.value);
    }

    function slideHoursTwo() {
        console.log("slideHoursTwo");
        sliderMaxValueHours = parseInt(sliderHoursTwo.max); // Update sliderMaxValue
        if (parseInt(sliderHoursTwo.value) - parseInt(sliderHoursOne.value) <= minGapHours) {
            sliderHoursTwo.value = parseInt(sliderHoursOne.value) + minGapHours;
        }
        displayValHoursTwo.textContent = formatTime(sliderHoursTwo.value);
        fillColorHours();
    }

    function fillColorHours() {
        console.log("fillColorHours");
        percent1 = (sliderHoursOne.value / sliderMaxValueHours) * 100;
        percent2 = (sliderHoursTwo.value / sliderMaxValueHours) * 100;
        sliderTrackHours.style.background = `linear-gradient(to right, #dadae5 ${percent1}% , #3264fe ${percent1}% , #3264fe ${percent2}%, #dadae5 ${percent2}%)`;
    }

    function formatTime(minutes) {
        let hours = Math.floor(minutes / 60);
        let mins = minutes % 60;
        return hours.toString().padStart(2, '0') + ':' + mins.toString().padStart(2, '0');
    }
</script>
  *@










@* <script>
    // Add event listener to update the displayed time range
    document.getElementById("timeRange").addEventListener("input", function() {
      updateSliderLabels();
    });

    function updateSliderLabels() {
      var timeRange = document.getElementById("timeRange");
      var startTime = document.getElementById("startTime");
      var endTime = document.getElementById("endTime");

      // Convert minutes to hours and minutes
      var startHours = Math.floor(timeRange.value / 60);
      var startMinutes = timeRange.value % 60;

      startTime.textContent = formatTime(startHours, startMinutes);

      // For the end time, use the maximum range (1439 minutes)
      var endHours = Math.floor((1439 - timeRange.value) / 60);
      var endMinutes = (1439 - timeRange.value) % 60;

      endTime.textContent = formatTime(endHours, endMinutes);
    }

    function formatTime(hours, minutes) {
      return hours.toString().padStart(2, '0') + ':' + minutes.toString().padStart(2, '0');
    }
  </script> *@



@* <ul>
    @if (ViewData["ScrapedMealHrefs"] != null)
    {
        foreach (var mealHref in ViewData["ScrapedMealHrefs"] as List<string>)
        {
            <li><a href="@mealHref">@mealHref</a></li>
        }
    }
</ul> *@


@* <h3>Scraped rows in list of ingredients:</h3>
<ul>
    @if (ViewData["ScrapedData"] != null)
    {
        foreach (var scrapedInfo in ViewData["ScrapedData"] as List<string>)
        {
            <li>@scrapedInfo</li>
        }
    }
</ul>

*@



@* @{
    var scrapedInstructions = ViewData["ScrapedInstructions"] as List<string>;
}

<h1>Scraped Instructions</h1>

@if (scrapedInstructions != null && scrapedInstructions.Count > 0)
{
    <ul>
        @foreach (var instruction in scrapedInstructions)
        {
            <li>@instruction</li>
        }
    </ul>
}
else
{
    <p>No instructions available.</p>
} *@